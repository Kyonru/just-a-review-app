import PushNotification, {
  PushNotification as PushNotificationType,
} from 'react-native-push-notification';

import { NotificationPayload } from 'src/@types';
import { getRandomInt } from 'src/utils/numbers';

import { REVIEWS_NOTIFICATION_CHANNEL } from './constants';

const DefaultNotificationProperties = {
  /* Android Only Properties */
  channelId: REVIEWS_NOTIFICATION_CHANNEL, // (required) channelId, if the channel doesn't exist, it will be created with options passed above (importance, vibration, sound). Once the channel is created, the channel will not be update. Make sure your channelId is different if you change these options. If you have created a custom channel, it will apply options of the channel.
  vibrate: true, // (optional) default: true

  vibration: 300, // vibration length in milliseconds, ignored if vibrate=false, default: 1000
  ignoreInForeground: false, // (optional) if true, the notification will not be visible when the app is in the foreground (useful for parity with how iOS notifications appear). should be used in combine with `com.dieam.reactnativepushnotification.notification_foreground` setting
  onlyAlertOnce: true, // (optional) alert will open only once with sound and notify, default: false
  /* iOS and Android properties */
  userInfo: {}, // (optional) default: {} (using null throws a JSON value '<null>' error)
  playSound: false,
};

export interface LocalNotificationProperties {
  title: string;
  message: string;
  ongoing?: boolean;
  group?: string;
  data?: NotificationPayload;
}

type popInitialNotificationCallback = (
  notification: PushNotificationType | null,
) => void;

/**
 * @returns notificationId: string
 */
export function triggerLocalNotification(
  props: LocalNotificationProperties,
): string {
  const id = `${getRandomInt()}`;

  PushNotification.localNotification({
    ...DefaultNotificationProperties,
    // @ts-ignore
    id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    userInfo: { ...props.data },
    title: props.title,
    message: props.message,
    ongoing: !!props.ongoing, // (optional) set whether this is an "ongoing" notification
    group: props.group,
    groupSummary: !!props.group,
  });

  return id;
}

/**
 * @returns notificationId: string
 */
export function createScheduleNotification(
  date: Date,
  props: LocalNotificationProperties,
): string {
  const id = `${getRandomInt()}`;
  PushNotification.localNotificationSchedule({
    ...DefaultNotificationProperties,
    // @ts-ignore
    id, // (optional) Valid unique 32 bit integer specified as string. default: Autogenerated Unique ID
    date,
    userInfo: { ...props.data },
    title: props.title,
    message: props.message,
    ongoing: !!props.ongoing, // (optional) set whether this is an "ongoing" notification
    group: props.group,
    groupSummary: !!props.group,
    allowWhileIdle: true, // (optional) set notification to work while on doze, default: false
  });
  return id;
}

export function cancelLocalNotification(id: string) {
  PushNotification.cancelLocalNotifications({ id });
}

export function removeAllNotifcations() {
  PushNotification.cancelAllLocalNotifications();
}

export function clearDeliveredNotifcations() {
  PushNotification.removeAllDeliveredNotifications();
}

export function popInitialNotification(
  callback: popInitialNotificationCallback,
) {
  PushNotification.popInitialNotification(callback);
}

export function revokePermissions() {
  PushNotification.abandonPermissions();
}
